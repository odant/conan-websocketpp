--- a/src/websocketpp/connection.hpp
+++ b/src/websocketpp/connection.hpp
@@ -1357,7 +1357,7 @@ public:
         m_connection_hdl = hdl;
         transport_con_type::set_handle(hdl);
     }
-protected:
+//protected:
     void handle_transport_init(lib::error_code const & ec);
 
     /// Set m_processor based on information in m_request. Set m_response
@@ -1367,7 +1367,7 @@ protected:
     /// Perform WebSocket handshake validation of m_request using m_processor.
     /// set m_response and return an error code indicating status.
     lib::error_code process_handshake_request();
-private:
+//private:
     
 
     /// Completes m_response, serializes it, and sends it out on the wire.
--- a/src/websocketpp/endpoint.hpp
+++ b/src/websocketpp/endpoint.hpp
@@ -85,6 +85,8 @@ public:
     // TODO: organize these
     typedef typename connection_type::termination_handler termination_handler;
 
+    typedef typename connection_type::socket_type socket_type;
+
     // This would be ideal. Requires C++11 though
     //friend connection;
 
@@ -658,6 +660,9 @@ public:
         }
         return con;
     }
+    
+	void adopt_socket(const std::string& request, socket_type && socket);
+	
 protected:
     connection_ptr create_connection();
 
--- a/src/websocketpp/impl/endpoint_impl.hpp
+++ b/src/websocketpp/impl/endpoint_impl.hpp
@@ -32,6 +32,54 @@
 
 namespace websocketpp {
 
+template <typename connection, typename config>
+void endpoint<connection, config>::adopt_socket(const std::string& request, socket_type && socket) {
+    connection_ptr con = lib::make_shared<connection_type>(m_is_server,
+        m_user_agent, lib::ref(m_alog), lib::ref(m_elog), lib::ref(m_rng));
+
+    connection_weak_ptr w(con);
+
+    con->set_handle(w);
+
+    // Copy default handlers from the endpoint
+    con->set_open_handler(m_open_handler);
+    con->set_close_handler(m_close_handler);
+    con->set_fail_handler(m_fail_handler);
+    con->set_ping_handler(m_ping_handler);
+    con->set_pong_handler(m_pong_handler);
+    con->set_pong_timeout_handler(m_pong_timeout_handler);
+    con->set_interrupt_handler(m_interrupt_handler);
+    con->set_http_handler(m_http_handler);
+    con->set_validate_handler(m_validate_handler);
+    con->set_message_handler(m_message_handler);
+
+    if (m_open_handshake_timeout_dur != config::timeout_open_handshake) {
+        con->set_open_handshake_timeout(m_open_handshake_timeout_dur);
+    }
+    if (m_close_handshake_timeout_dur != config::timeout_close_handshake) {
+        con->set_close_handshake_timeout(m_close_handshake_timeout_dur);
+    }
+    if (m_pong_timeout_dur != config::timeout_pong) {
+        con->set_pong_timeout(m_pong_timeout_dur);
+    }
+    if (m_max_message_size != config::max_message_size) {
+        con->set_max_message_size(m_max_message_size);
+    }
+    con->set_max_http_body_size(m_max_http_body_size);
+
+    lib::error_code ec;
+
+    ec = con->init_asio(socket.get_executor());
+
+    con->get_socket() = std::move(socket);
+    con->m_state = websocketpp::session::state::connecting;
+    con->m_internal_state = websocketpp::istate::READ_HTTP_REQUEST;
+
+    strncpy(con->m_buf, request.c_str(), request.size());
+
+    con->handle_read_handshake(lib::error_code(), request.size());
+}
+
 template <typename connection, typename config>
 typename endpoint<connection,config>::connection_ptr
 endpoint<connection,config>::create_connection() {
--- a/src/websocketpp/transport/asio/connection.hpp
+++ b/src/websocketpp/transport/asio/connection.hpp
@@ -85,10 +85,14 @@ public:
     typedef typename config::response_type response_type;
     typedef typename response_type::ptr response_ptr;
 
-    /// Type of a pointer to the Asio executor being used
+    /// Type of Asio executor being used
+#if BOOST_VERSION < 107400    
     typedef lib::asio::executor executor_type;
+#else
+    typedef lib::asio::any_io_executor executor_type;
+#endif    
     /// Type of a pointer to the Asio strand<executor> being used
-    typedef lib::shared_ptr<lib::asio::strand<lib::asio::executor> > strand_ptr;
+    typedef lib::shared_ptr<lib::asio::strand<executor_type> > strand_ptr;
     /// Type of a pointer to the Asio timer class
     typedef lib::shared_ptr<lib::asio::steady_timer> timer_ptr;
 
@@ -406,7 +410,7 @@ public:
      * read or write the WebSocket handshakes. At this point the original
      * callback function is called.
      */
-protected:
+//protected:
     void init(init_handler callback) {
         if (m_alog->static_test(log::alevel::devel)) {
             m_alog->write(log::alevel::devel,"asio connection init");
@@ -461,7 +465,7 @@ protected:
         m_executor = executor;
 
         if (config::enable_multithreading) {
-            m_strand = lib::make_shared<lib::asio::strand<lib::asio::executor> >(
+            m_strand = lib::make_shared<lib::asio::strand<executor_type> >(
                 executor);
         }
 
--- a/src/websocketpp/transport/asio/endpoint.hpp
+++ b/src/websocketpp/transport/asio/endpoint.hpp
@@ -77,8 +77,12 @@ public:
     /// associated with this endpoint transport component
     typedef typename transport_con_type::ptr transport_con_ptr;
 
-    /// Type of a pointer to the ASIO executor being used
+    /// Type of Asio executor being used
+#if BOOST_VERSION < 107400    
     typedef lib::asio::executor executor_type;
+#else
+    typedef lib::asio::any_io_executor executor_type;
+#endif    
     /// Type of a shared pointer to the acceptor being used
     typedef lib::shared_ptr<lib::asio::ip::tcp::acceptor> acceptor_ptr;
     /// Type of a shared pointer to the resolver being used
@@ -86,7 +90,7 @@ public:
     /// Type of timer handle
     typedef lib::shared_ptr<lib::asio::steady_timer> timer_ptr;
     /// Type of a shared pointer to an executor_work_guard object
-    typedef lib::shared_ptr<lib::asio::executor_work_guard<lib::asio::executor> > executor_work_guard_ptr;
+    typedef lib::shared_ptr<lib::asio::executor_work_guard<executor_type> > executor_work_guard_ptr;
 
     /// Type of socket pre-bind handler
     typedef lib::function<lib::error_code(acceptor_ptr)> tcp_pre_bind_handler;
@@ -365,7 +369,7 @@ public:
      *
      * @return A reference to the endpoint's executor
      */
-    lib::asio::executor get_executor() {
+    executor_type get_executor() {
         return m_executor;
     }
     
@@ -677,7 +681,7 @@ public:
      * @since 0.3.0
      */
     void start_perpetual() {
-        m_executor_work_guard = lib::make_shared<lib::asio::executor_work_guard<lib::asio::executor> >(
+        m_executor_work_guard = lib::make_shared<lib::asio::executor_work_guard<executor_type> >(
             m_executor
         );
     }
--- a/src/websocketpp/transport/asio/security/none.hpp
+++ b/src/websocketpp/transport/asio/security/none.hpp
@@ -62,10 +62,14 @@ public:
     /// Type of a shared pointer to this connection socket component
     typedef lib::shared_ptr<type> ptr;
 
-    /// Type of a pointer to the Asio executor being used
+    /// Type of Asio executor being used
+#if BOOST_VERSION < 107400    
     typedef lib::asio::executor executor_type;
+#else
+    typedef lib::asio::any_io_executor executor_type;
+#endif    
     /// Type of a pointer to the Asio executor strand being used
-    typedef lib::shared_ptr<lib::asio::strand<lib::asio::executor> > strand_ptr;
+    typedef lib::shared_ptr<lib::asio::strand<executor_type> > strand_ptr;
     /// Type of the ASIO socket being used
     typedef lib::asio::ip::tcp::socket socket_type;
     /// Type of a shared pointer to the socket being used.
--- a/src/websocketpp/transport/asio/security/tls.hpp
+++ b/src/websocketpp/transport/asio/security/tls.hpp
@@ -71,10 +71,14 @@ public:
     typedef lib::asio::ssl::stream<lib::asio::ip::tcp::socket> socket_type;
     /// Type of a shared pointer to the ASIO socket being used
     typedef lib::shared_ptr<socket_type> socket_ptr;
-    /// Type of a pointer to the ASIO executor being used
+    /// Type of Asio executor being used
+#if BOOST_VERSION < 107400    
     typedef lib::asio::executor executor_type;
+#else
+    typedef lib::asio::any_io_executor executor_type;
+#endif    
     /// Type of a pointer to the ASIO executor strand being used
-    typedef lib::shared_ptr<lib::asio::strand<lib::asio::executor> > strand_ptr;
+    typedef lib::shared_ptr<lib::asio::strand<executor_type> > strand_ptr;
     /// Type of a shared pointer to the ASIO TLS context being used
     typedef lib::shared_ptr<lib::asio::ssl::context> context_ptr;
 
